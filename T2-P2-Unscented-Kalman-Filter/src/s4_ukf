/////////////////////////////////////////////////////////////////////////////////
void UKF::PredictMeanAndCovariance(VectorXd* x_out, MatrixXd* P_out,  MatrixXd Xsig_pred) {

  //set state dimension
  int n_x = n_x_;

  //set augmented dimension
  int n_aug = n_aug_;

  //define spreading parameter
  double lambda = 3 - n_aug_;

  //create example matrix with predicted sigma points

  //create vector for weights
  //VectorXd weights = VectorXd(2*n_aug+1);

  //create vector for predicted state
  VectorXd x = VectorXd(n_x);

  //create covariance matrix for prediction
  MatrixXd P = MatrixXd(n_x, n_x);


/*******************************************************************************
 * Student part begin
 ******************************************************************************/

  //predicted state mean
  x.fill(0.0);
  //  Modification ? BUG ?
  //for (int i = 0; i < 2 * n_aug + 1; i++) {  //iterate over sigma points
    //x = x+ weights_(i) * Xsig_pred.col(i);
  //}
  //x = weights_ * Xsig_pred;
  x = Xsig_pred * weights_;

  //predicted state covariance matrix
  P.fill(0.0);
  for (int i = 0; i < 2 * n_aug + 1; i++) {  //iterate over sigma points
    // state difference
    VectorXd x_diff = Xsig_pred.col(i) - x;
    //angle normalization
    x_diff(3) =  NormalizeAngle (x_diff(3));
    P = P + weights_(i) * x_diff * x_diff.transpose() ;
  }

/*******************************************************************************
 * Student part end
 ******************************************************************************/

  //print result
  //std::cout << "Predicted state" << std::endl;
  //std::cout << x << std::endl;
  //std::cout << "Predicted covariance matrix" << std::endl;
  //std::cout << P << std::endl;

  //write result
  *x_out = x;
  *P_out = P;
}

