//////////////////////////////////////////////////////////////////////////////////
// Create AugmentedSigmaPoints
//////////////////////////////////////////////////////////////////////////////////
void UKF::AugmentedSigmaPoints(MatrixXd* Xsig_out) {
  //set state dimension
  int n_x = n_x_;
  //set augmented dimension
  int n_aug = n_aug_;
  //Process noise standard deviation longitudinal acceleration in m/s^2
  double std_a = std_a_;
  //Process noise standard deviation yaw acceleration in rad/s^2
  double std_yawdd = std_yawdd_;
  //define spreading parameter
  double lambda = 3 - n_aug;
  //set example state
  VectorXd x = VectorXd(n_x);
  x = x_ ;
  //create example covariance matrix
  MatrixXd P = MatrixXd(n_x, n_x);
  P = P_;
  //create augmented mean vector
  VectorXd x_aug = VectorXd(n_aug);
  //create augmented state covariance
  MatrixXd P_aug = MatrixXd(n_aug, n_aug);
  //create sigma point matrix
  MatrixXd Xsig_aug = MatrixXd(n_aug, 2 * n_aug + 1);

/*******************************************************************************
 * Student part begin
 ******************************************************************************/
  //cout << "AugmentedSigmaPoints << \n" ;
  //create augmented mean state
  x_aug.head(5) = x;
  x_aug(5) = 0;
  x_aug(6) = 0;

  //create augmented covariance matrix
  P_aug.fill(0.0);
  P_aug.topLeftCorner(5,5) = P;
  P_aug(5,5) = std_a*std_a;
  P_aug(6,6) = std_yawdd*std_yawdd;

  //create square root matrix
  MatrixXd L = P_aug.llt().matrixL();

  //create augmented sigma points
  Xsig_aug.col(0)  = x_aug;
  for (int i = 0; i< n_aug; i++)
  {
    Xsig_aug.col(i+1)       = x_aug + sqrt(lambda+n_aug) * L.col(i);
    Xsig_aug.col(i+1+n_aug) = x_aug - sqrt(lambda+n_aug) * L.col(i);
  }

/*******************************************************************************
 * Student part end
 ******************************************************************************/

  //print result
  //std::cout << "Xsig_aug = " << std::endl << Xsig_aug << std::endl;

  //write result
  *Xsig_out = Xsig_aug;

}
