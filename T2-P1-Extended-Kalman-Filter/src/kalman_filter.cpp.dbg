#include "kalman_filter.h"
#include "tools.h"
#include <iostream>
using namespace std;

using Eigen::MatrixXd;
using Eigen::VectorXd;

// Please note that the Eigen library does not initialize 
// VectorXd or MatrixXd objects with zeros upon creation.

KalmanFilter::KalmanFilter() {}

KalmanFilter::~KalmanFilter() {}

void KalmanFilter::Init(VectorXd &x_in, MatrixXd &P_in, MatrixXd &F_in,
                        MatrixXd &H_in, MatrixXd &R_in, MatrixXd &Q_in) {
  x_ = x_in;
  P_ = P_in;
  F_ = F_in;
  H_ = H_in;
  R_ = R_in;
  Q_ = Q_in;
  cout << "KalmanFilter::Init \n";
}

void KalmanFilter::Predict() {
  /**
  TODO:
    * predict the state
  */
   cout << "Predict (End 1) ";
    x_ = F_ * x_;
   //cout << "----" << endl;
   //cout << F_ << endl;
   //cout << "----" << endl;
   //cout << x_ << endl;
   //cout << "----" << endl;
   //cout << "Predict (End 2) \n";
    MatrixXd Ft = F_.transpose();
   //cout << "Predict (End 3) \n";
   //cout << "F----" << endl;
   //cout << F_ << endl;
   //cout << "Ft----" << endl;
   //cout << Ft << endl;
   //cout << "P ----" << endl;
   //cout << P_ << endl;
   //cout << "Q ----" << endl;
   //cout << Q_<<endl;
   //cout << "----" << endl;
   //MatrixXd t1 = F_ * P_ * Ft;
   //cout << "----" << endl;
    P_ = F_ * P_ * Ft + Q_;
   cout << "Predict (End) \n";
}

void KalmanFilter::Update(const VectorXd &z) {
  /**
  TODO:
    * update the state by using Kalman Filter equations
  */
    cout << "update  (begin) ";
    VectorXd z_pred = H_ * x_;
    VectorXd y = z - z_pred;

    MatrixXd Ht = H_.transpose();
    MatrixXd S = H_ * P_ * Ht + R_;
    MatrixXd Si = S.inverse();
    MatrixXd PHt = P_ * Ht;
    MatrixXd K = PHt * Si;

    //new estimate
    x_ = x_ + (K * y);
    long x_size = x_.size();
    MatrixXd I = MatrixXd::Identity(x_size, x_size);
    P_ = (I - K * H_) * P_;
    cout << "update  (end  ) \n";

}
Tools tools;

void KalmanFilter::UpdateEKF(const VectorXd &z) {
  /**
  TODO:
    * update the state by using Extended Kalman Filter equations
  */
    //VectorXd z_pred = H_ * x_;
    cout << "updateekf  (begin) ";
    VectorXd h = VectorXd(3); // h(x_)
    h << tools.Convert_Cartesian2Polar (x_);
   
    //VectorXd y = z - z_pred;
    VectorXd y = z - h;

    MatrixXd Ht = H_.transpose();
    MatrixXd S = H_ * P_ * Ht + R_;
    MatrixXd Si = S.inverse();
    MatrixXd PHt = P_ * Ht;
    MatrixXd K = PHt * Si;

    //new estimate
    x_ = x_ + (K * y);
    long x_size = x_.size();
    MatrixXd I = MatrixXd::Identity(x_size, x_size);
    P_ = (I - K * H_) * P_;
    cout << "updateekf  (end  ) \n";

}


